<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <groupId>group.msg.at.cloud</groupId>
  <artifactId>cxp-hello-helm</artifactId>
  <version>1.0.0.LOCAL.1234567</version>
  <description>Simplest possible cloud native java backend based on Spring Boot</description>
  <distributionManagement>
    <repository>
      <id>cloudtrain-maven-repository</id>
      <name>msg Automotive CloudTrain Releases Repository</name>
      <url>https://nexus.cloudtrain.aws.msgoat.eu/repository/cloudtrain-releases/</url>
    </repository>
  </distributionManagement>
  <properties>
    <k8s.cluster.route>https://apps.cloudtrain.aws.msgoat.eu</k8s.cluster.route>
    <maven.spring.boot.plugin.version>${spring.boot.version}</maven.spring.boot.plugin.version>
    <maven.source.plugin.version>3.2.1</maven.source.plugin.version>
    <k8s.cluster.namespace>default</k8s.cluster.namespace>
    <maven.flatten.plugin.version>1.2.7</maven.flatten.plugin.version>
    <sonar.host.url>https://sonarqube.cloudtrain.aws.msgoat.eu</sonar.host.url>
    <spring.boot.version>3.0.2</spring.boot.version>
    <k8s.ingress.host>apps.cloudtrain.aws.msgoat.eu</k8s.ingress.host>
    <restassured.version>4.4.0</restassured.version>
    <maven.install.plugin.version>3.0.0-M1</maven.install.plugin.version>
    <maven.jacoco.plugin.version>0.8.7</maven.jacoco.plugin.version>
    <k8s.ingress.path>/${k8s.cluster.namespace}/${project.artifactId}</k8s.ingress.path>
    <jacoco.port>38089</jacoco.port>
    <maven.resources.plugin.version>3.2.0</maven.resources.plugin.version>
    <docker.removeMode>all</docker.removeMode>
    <cnj.common.test.version>3.0.1</cnj.common.test.version>
    <docker.image.name>${docker.registry.name}/${docker.organization.name}/${project.artifactId}</docker.image.name>
    <maven.compiler.plugin.version>3.8.1</maven.compiler.plugin.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <junit.version>5.9.2</junit.version>
    <maven.site.plugin.version>3.9.1</maven.site.plugin.version>
    <micrometer.version>1.10.3</micrometer.version>
    <docker.test.target.route>http://localhost:38080</docker.test.target.route>
    <docker.cleanup>try</docker.cleanup>
    <maven.deploy.plugin.version>3.0.0-M1</maven.deploy.plugin.version>
    <maven.failsafe.plugin.version>3.0.0-M5</maven.failsafe.plugin.version>
    <jacoco.address>localhost</jacoco.address>
    <maven.sonar.plugin.version>3.9.0.2155</maven.sonar.plugin.version>
    <docker.organization.name>cloudtrain</docker.organization.name>
    <java.version>17</java.version>
    <docker.verbose>true</docker.verbose>
    <maven.clean.plugin.version>3.1.0</maven.clean.plugin.version>
    <maven.jar.plugin.version>3.2.0</maven.jar.plugin.version>
    <maven.helm.plugin.version>4.0.0</maven.helm.plugin.version>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <revision>1.0.0</revision>
    <sha1>.1234567</sha1>
    <logstash.logback.encoder.version>7.2</logstash.logback.encoder.version>
    <maven.docker.plugin.version>0.37.0</maven.docker.plugin.version>
    <changelist>.LOCAL</changelist>
    <start-class>group.msg.at.cloud.cloudtrain.SpringHelloApplication</start-class>
    <maven.dependency.plugin.version>3.2.0</maven.dependency.plugin.version>
    <maven.surefire.plugin.version>3.0.0-M5</maven.surefire.plugin.version>
    <docker.registry.name>docker.cloudtrain.aws.msgoat.eu</docker.registry.name>
    <k8s.test.target.route>${k8s.cluster.route}${k8s.ingress.path}</k8s.test.target.route>
    <maven.compose.plugin.version>3.0.0</maven.compose.plugin.version>
    <maven.enforcer.plugin.version>3.0.0</maven.enforcer.plugin.version>
  </properties>
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>${spring.boot.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit-bom</artifactId>
        <version>${junit.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>
  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-devtools</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>net.logstash.logback</groupId>
      <artifactId>logstash-logback-encoder</artifactId>
      <version>${logstash.logback.encoder.version}</version>
    </dependency>
    <dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-registry-prometheus</artifactId>
      <version>${micrometer.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>group.msg.at.cloud.common</groupId>
      <artifactId>cnj-common-test</artifactId>
      <version>${cnj.common.test.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>${maven.clean.plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${maven.compiler.plugin.version}</version>
          <configuration>
            <source>${java.version}</source>
            <target>${java.version}</target>
            <parameters>true</parameters>
            <showDeprecation>true</showDeprecation>
            <showWarnings>true</showWarnings>
            <compilerArgs>
              <arg>-Xlint</arg>
            </compilerArgs>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>${maven.dependency.plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>${maven.deploy.plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-enforcer-plugin</artifactId>
          <version>${maven.enforcer.plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-failsafe-plugin</artifactId>
          <version>${maven.failsafe.plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>${maven.install.plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>${maven.jar.plugin.version}</version>
          <configuration>
            <archive>
              <manifest>
                <mainClass>${start-class}</mainClass>
                <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
              </manifest>
            </archive>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>${maven.resources.plugin.version}</version>
          <configuration>
            <delimiters>
              <delimiter>${resource.delimiter}</delimiter>
            </delimiters>
            <useDefaultDelimiters>false</useDefaultDelimiters>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-site-plugin</artifactId>
          <version>${maven.site.plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${maven.surefire.plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>flatten-maven-plugin</artifactId>
          <version>${maven.flatten.plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.jacoco</groupId>
          <artifactId>jacoco-maven-plugin</artifactId>
          <version>${maven.jacoco.plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.sonarsource.scanner.maven</groupId>
          <artifactId>sonar-maven-plugin</artifactId>
          <version>${maven.sonar.plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-maven-plugin</artifactId>
          <version>${maven.spring.boot.plugin.version}</version>
          <executions>
            <execution>
              <id>repackage</id>
              <goals>
                <goal>repackage</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <mainClass>${start-class}</mainClass>
            <classifier>spring</classifier>
            <attach>false</attach>
          </configuration>
        </plugin>
        <plugin>
          <groupId>io.fabric8</groupId>
          <artifactId>docker-maven-plugin</artifactId>
          <version>${maven.docker.plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>group.msg.at.cloud.tools</groupId>
          <artifactId>compose-maven-plugin</artifactId>
          <version>${maven.compose.plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>group.msg.at.cloud.tools</groupId>
          <artifactId>helm-maven-plugin</artifactId>
          <version>${maven.helm.plugin.version}</version>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <plugin>
        <artifactId>maven-enforcer-plugin</artifactId>
        <executions>
          <execution>
            <id>enforce-versions</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireMavenVersion>
                  <version>[3.5,)</version>
                </requireMavenVersion>
                <requireJavaVersion>
                  <version>${java.version}</version>
                </requireJavaVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>flatten-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>flatten</id>
            <phase>process-resources</phase>
            <goals>
              <goal>flatten</goal>
            </goals>
          </execution>
          <execution>
            <id>flatten.clean</id>
            <phase>clean</phase>
            <goals>
              <goal>clean</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <updatePomFile>true</updatePomFile>
          <flattenMode>resolveCiFriendliesOnly</flattenMode>
        </configuration>
      </plugin>
    </plugins>
  </build>
  <profiles>
    <profile>
      <id>local-stage</id>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <excludes>
                <exclude>**/*SystemTest.java</exclude>
              </excludes>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>repackage</id>
                <phase>package</phase>
                <goals>
                  <goal>repackage</goal>
                </goals>
              </execution>
              <execution>
                <id>run-spring-application</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>run</goal>
                </goals>
                <configuration>
                  <profiles>
                    <profile>test</profile>
                  </profiles>
                  <systemPropertyVariables>
                    <cloudtrain.services.downstream.url>http://localhost:38090</cloudtrain.services.downstream.url>
                  </systemPropertyVariables>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>pre-commit-stage</id>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <excludes>
                <exclude>**/*SystemTest.java</exclude>
              </excludes>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
          </plugin>
          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
              <execution>
                <id>copy-docker-resources</id>
                <phase>package</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <resources>
                    <resource>
                      <directory>${project.basedir}/src/main/docker</directory>
                      <filtering>true</filtering>
                    </resource>
                    <resource>
                      <directory>${project.build.directory}</directory>
                      <includes>
                        <include>*-spring.jar</include>
                      </includes>
                    </resource>
                  </resources>
                  <outputDirectory>${project.build.directory}/docker-resources</outputDirectory>
                </configuration>
              </execution>
              <execution>
                <id>copy-compose-resources</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <resources>
                    <resource>
                      <directory>${project.basedir}/src/test/docker/${project.artifactId}</directory>
                      <filtering>true</filtering>
                    </resource>
                  </resources>
                  <outputDirectory>${project.build.directory}/compose-resources/${project.artifactId}</outputDirectory>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>build-docker-image</id>
                <phase>package</phase>
                <goals>
                  <goal>build</goal>
                </goals>
                <configuration>
                  <images>
                    <image>
                      <name>${docker.image.name}</name>
                      <build>
                        <dockerFileDir>${project.build.directory}/docker-resources</dockerFileDir>
                        <tags>
                          <tag>${project.version}</tag>
                        </tags>
                      </build>
                    </image>
                  </images>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>group.msg.at.cloud.tools</groupId>
            <artifactId>compose-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>start-docker-containers</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>upWithLogs</goal>
                </goals>
                <configuration>
                  <composeFile>${project.build.directory}/compose-resources/${project.artifactId}/docker-compose.yml</composeFile>
                </configuration>
              </execution>
              <execution>
                <id>stop-docker-containers</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>down</goal>
                </goals>
                <configuration>
                  <composeFile>${project.build.directory}/compose-resources/${project.artifactId}/docker-compose.yml</composeFile>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <artifactId>maven-failsafe-plugin</artifactId>
            <executions>
              <execution>
                <id>run-system-tests</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>integration-test</goal>
                </goals>
                <configuration>
                  <failIfNoTests>true</failIfNoTests>
                  <includes>
                    <include>**/*SystemTest.java</include>
                  </includes>
                  <systemPropertyVariables>
                    <test.target.route>${docker.test.target.route}</test.target.route>
                  </systemPropertyVariables>
                </configuration>
              </execution>
              <execution>
                <id>verify-system-test-results</id>
                <phase>verify</phase>
                <goals>
                  <goal>verify</goal>
                </goals>
                <configuration>
                  <failIfNoTests>true</failIfNoTests>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>copy-jacoco-agent-to-docker-resources</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>copy</goal>
                </goals>
                <configuration>
                  <artifactItems>
                    <artifactItem>
                      <groupId>org.jacoco</groupId>
                      <artifactId>org.jacoco.agent</artifactId>
                      <version>${maven.jacoco.plugin.version}</version>
                      <classifier>runtime</classifier>
                    </artifactItem>
                  </artifactItems>
                  <stripClassifier>true</stripClassifier>
                  <stripVersion>true</stripVersion>
                  <outputDirectory>${project.build.directory}/docker-resources</outputDirectory>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>commit-stage</id>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <excludes>
                <exclude>**/*SystemTest.java</exclude>
              </excludes>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
          </plugin>
          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
              <execution>
                <id>copy-docker-resources</id>
                <phase>package</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <resources>
                    <resource>
                      <directory>${project.basedir}/src/main/docker</directory>
                      <filtering>true</filtering>
                    </resource>
                    <resource>
                      <directory>${project.build.directory}</directory>
                      <includes>
                        <include>*-spring.jar</include>
                      </includes>
                    </resource>
                  </resources>
                  <outputDirectory>${project.build.directory}/docker-resources</outputDirectory>
                </configuration>
              </execution>
              <execution>
                <id>copy-compose-resources</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <resources>
                    <resource>
                      <directory>${project.basedir}/src/test/docker/${project.artifactId}</directory>
                      <filtering>true</filtering>
                    </resource>
                  </resources>
                  <outputDirectory>${project.build.directory}/compose-resources/${project.artifactId}</outputDirectory>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>build-docker-image</id>
                <phase>package</phase>
                <goals>
                  <goal>build</goal>
                </goals>
                <configuration>
                  <images>
                    <image>
                      <name>${docker.image.name}</name>
                      <build>
                        <dockerFileDir>${project.build.directory}/docker-resources</dockerFileDir>
                        <tags>
                          <tag>${project.version}</tag>
                        </tags>
                      </build>
                    </image>
                  </images>
                </configuration>
              </execution>
              <execution>
                <id>push-docker-image</id>
                <phase>install</phase>
                <goals>
                  <goal>push</goal>
                </goals>
                <configuration>
                  <images>
                    <image>
                      <name>${docker.image.name}</name>
                      <build>
                        <dockerFileDir>${project.build.directory}/docker-resources</dockerFileDir>
                        <tags>
                          <tag>${project.version}</tag>
                        </tags>
                      </build>
                    </image>
                  </images>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>group.msg.at.cloud.tools</groupId>
            <artifactId>compose-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>start-docker-containers</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>upWithLogs</goal>
                </goals>
                <configuration>
                  <composeFile>${project.build.directory}/compose-resources/${project.artifactId}/docker-compose.yml</composeFile>
                </configuration>
              </execution>
              <execution>
                <id>stop-docker-containers</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>down</goal>
                </goals>
                <configuration>
                  <composeFile>${project.build.directory}/compose-resources/${project.artifactId}/docker-compose.yml</composeFile>
                  <removeVolumes>true</removeVolumes>
                  <removeOrphans>true</removeOrphans>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <artifactId>maven-failsafe-plugin</artifactId>
            <executions>
              <execution>
                <id>run-system-tests</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>integration-test</goal>
                </goals>
                <configuration>
                  <includes>
                    <include>**/*SystemTest.java</include>
                  </includes>
                  <systemPropertyVariables>
                    <test.target.route>${docker.test.target.route}</test.target.route>
                  </systemPropertyVariables>
                </configuration>
              </execution>
              <execution>
                <id>verify-system-test-results</id>
                <phase>verify</phase>
                <goals>
                  <goal>verify</goal>
                </goals>
                <configuration>
                  <failIfNoTests>true</failIfNoTests>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>copy-jacoco-agent-to-docker-resources</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>copy</goal>
                </goals>
                <configuration>
                  <artifactItems>
                    <artifactItem>
                      <groupId>org.jacoco</groupId>
                      <artifactId>org.jacoco.agent</artifactId>
                      <version>${maven.jacoco.plugin.version}</version>
                      <classifier>runtime</classifier>
                    </artifactItem>
                  </artifactItems>
                  <stripClassifier>true</stripClassifier>
                  <stripVersion>true</stripVersion>
                  <outputDirectory>${project.build.directory}/docker-resources</outputDirectory>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>prepare-agent-for-unit-tests</id>
                <goals>
                  <goal>prepare-agent</goal>
                </goals>
              </execution>
              <execution>
                <id>prepare-agent-for-system-tests</id>
                <goals>
                  <goal>prepare-agent-integration</goal>
                </goals>
              </execution>
              <execution>
                <id>pull-jacoco-data-from-container</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>dump</goal>
                </goals>
              </execution>
              <execution>
                <id>generate-report</id>
                <phase>verify</phase>
                <goals>
                  <goal>report</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.sonarsource.scanner.maven</groupId>
            <artifactId>sonar-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>analyze-code</id>
                <phase>verify</phase>
                <goals>
                  <goal>sonar</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>integration-test-stage</id>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <skip>true</skip>
            </configuration>
          </plugin>
          <plugin>
            <artifactId>maven-jar-plugin</artifactId>
            <configuration>
              <skipIfEmpty>true</skipIfEmpty>
            </configuration>
          </plugin>
          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
              <execution>
                <id>copy-helm-resources</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <resources>
                    <resource>
                      <directory>${project.basedir}/src/main/helm/${project.artifactId}</directory>
                      <filtering>true</filtering>
                    </resource>
                  </resources>
                  <outputDirectory>${project.build.directory}/helm-resources/${project.artifactId}</outputDirectory>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>group.msg.at.cloud.tools</groupId>
            <artifactId>helm-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>helm-install</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>deploy</goal>
                </goals>
                <configuration>
                  <chartDirectory>${project.build.directory}/helm-resources/${project.artifactId}</chartDirectory>
                  <releaseName>${project.artifactId}</releaseName>
                  <namespace>${k8s.cluster.namespace}</namespace>
                  <debug>true</debug>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <artifactId>maven-failsafe-plugin</artifactId>
            <executions>
              <execution>
                <id>run-system-tests</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>integration-test</goal>
                </goals>
                <configuration>
                  <includes>
                    <include>**/*SystemTest.java</include>
                  </includes>
                  <systemPropertyVariables>
                    <test.target.route>${k8s.test.target.route}</test.target.route>
                    <test.target.readinessProbe.initialDelaySeconds>0</test.target.readinessProbe.initialDelaySeconds>
                  </systemPropertyVariables>
                </configuration>
              </execution>
              <execution>
                <id>verify-system-test-results</id>
                <phase>verify</phase>
                <goals>
                  <goal>verify</goal>
                </goals>
                <configuration>
                  <failIfNoTests>true</failIfNoTests>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <properties>
        <k8s.cluster.namespace>cloudtrain-int</k8s.cluster.namespace>
        <spring-boot.repackage.skip>true</spring-boot.repackage.skip>
      </properties>
    </profile>
  </profiles>
</project>
